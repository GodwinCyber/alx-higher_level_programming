===========================
Instance ``geometry_test``
===========================

Python 3.8.10 (default, Mar 15 2022, 12:22:08) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> x = BaseGeometry()
>>> isinstance(x, BaseGeometry)
True
>>> x.integer_validator("width", 2)
>>> x.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 9, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented
>>> x.integer_validator("width", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 17, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: width must be greater than 0
>>> x.integer_validator("width", -5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 17, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: width must be greater than 0
>>> x.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> x.integer_validator("width")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> x.integer_validator("width", "x")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 14, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: width must be an integer
>>> x.integer_validator("age", (7,))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 14, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> x.integer_validator("age", [3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 14, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> x.integer_validator("age", False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 14, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> x.integer_validator("age", {3,4})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 14, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> x.integer_validator("age", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 14, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> x.integer_validator("age", 5.54)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 14, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> 
