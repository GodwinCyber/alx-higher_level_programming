The ``add_integer`` module
--------------------------
--------------------------

Using ``add``
-------------

Write a function that adds 2 integers.

Prototype: def add_integer(a, b=98):
a and b must be integers or floats, otherwise raise a TypeError exception with the message a must be an integer or b must be an integer
a and b must be first casted to integers if they are float
Returns an integer: the addition of a and b
You are not allowed to import any module

Python 3.8.10 (default, Mar 15 2022, 12:22:08) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(4, 4)
8
>>> add_integer(4.5, 4)
8
>>> add_integer(4.5, 4.5)
8
>>> add_integer("4", 4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 12, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(4, "4")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> add_integer("4", "4")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 12, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> a = float("inf")
>>> b = 10
>>> add_integer(a, b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 15, in add_integer
    return (int(a) + int(b))
OverflowError: cannot convert float infinity to integer
>>> 
